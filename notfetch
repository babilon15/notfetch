#!/usr/bin/python3
# -*- coding: utf-8 -*-

import subprocess, os

### CONF ###

mountpoints = [
	"/boot",
	"/"
]

row_format = "{leader_spaces}\033[1m{name}\033[0m  {value}"

### PROGRAM ###

names = []
values = []

# Hostname:
try:
	file_object = open('/etc/hostname')
	hn_val = file_object.readline()
	hn_val = hn_val.rstrip()
except:
	pass
else:
	names.append('hostname')
	values.append(hn_val)
finally:
	file_object.close()

# Distro name:
try:
	file_object = open('/etc/os-release')
	for line in file_object:
		if 'PRETTY_NAME' in line:
			break
	pretty_name = line[ line.find('"') + 1 : line.rfind('"') ]
except:
	pass
else:
	names.append('distro')
	values.append(pretty_name)
finally:
	file_object.close()

# Linux version:
try:
	out = subprocess.check_output( ['uname', '-r'] )
	ver = out.decode('utf-8')
	ver = ver.rstrip()
except:
	pass
else:
	names.append('kernel')
	values.append(ver)

# Shell:
try:
	shell_path = os.environ['SHELL']
	shell_name = shell_path[ shell_path.rfind('/') + 1 : ]
except:
	pass
else:
	names.append('shell')
	values.append(shell_name)

# Default editor:
try:
	edit = os.environ['EDITOR']
except:
	pass
else:
	names.append('editor')
	values.append(edit)

# Terminal + device:
try:
	term = os.environ['TERM']
	if term == 'linux':
		term = 'console'
	out = subprocess.check_output( ['tty'] )
	tty = out.decode('utf-8')
	tty = tty.rstrip()
	term_dev = term + ' [' + tty + ']'
except:
	pass
else:
	names.append('terminal')
	values.append(term_dev)

# Normal users:
try:
	file_object = open('/etc/passwd')
	users_list = []
	for line in file_object:
		line_list = line.split(':')
		if len(line_list) == 7:
			if int(line_list[2]) >= 1000 and 'nologin' not in line_list[6]:
				users_list.append(line_list[0])
	users = ''
	index = 0
	last_index = len(users_list) - 1
	for username in users_list:
		if index == last_index:
			users += username
		else:
			users += username + ', '
		index += 1
except:
	pass
else:
	names.append('users')
	values.append(users)
finally:
	file_object.close()

# RAM and swap usage (2 row):
try:
	file_object = open('/proc/meminfo')
	for line in file_object:
		if 'MemTotal' in line:
			mem_total = int( line[ line.find(':') + 1 : line.rfind('k') ] )
		if 'MemAvailable' in line:
			mem_available = int( line[ line.find(':') + 1 : line.rfind('k') ] )
		if 'SwapTotal' in line:
			swap_total = int( line[ line.find(':') + 1 : line.rfind('k') ] )
		if 'SwapFree' in line:
			swap_free = int( line[ line.find(':') + 1 : line.rfind('k') ] )
	ram_usage_num = round(((mem_total - mem_available) / mem_total) * 100)
	swap_usage_num = round(((swap_total - swap_free) / swap_total) * 100)
	ram_usage = str(ram_usage_num) + ' %'
	swap_usage = str(swap_usage_num) + ' %'
except:
	pass
else:
	# RAM usage:
	names.append('RAM')
	values.append(ram_usage)
	# Swap usage:
	names.append('swap')
	values.append(swap_usage)
finally:
	file_object.close()

# Generate:
longest_n = -1
for name_b in names:
	name_b_len = len(name_b)
	if name_b_len > longest_n:
		longest_n = name_b_len

for name, value in zip(names, values):
	spaces_n = longest_n - len(name)
	print(row_format.format(
		leader_spaces=spaces_n * " ",
		name=name,
		value=value
	))